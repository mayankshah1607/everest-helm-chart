---
# Source: everest/templates/everest-monitoring/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: everest-monitoring
---
# Source: everest/templates/everest-olm/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: everest-olm
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: everest-helm-pre-delete-hook
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
---
# Source: everest/templates/everest-monitoring/hooks.yaml
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: everest-helm-post-install-hook
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
---
# Source: everest/templates/everest-olm/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: olm-operator-serviceaccount
  namespace: everest-olm
---
# Source: everest/templates/everest-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: everest-operator
  namespace: everest-system
---
# Source: everest/templates/everest-server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: everest-admin
---
# Source: everest/templates/everest-olm/packageserver.apiservice.yaml
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lRR25VdUxxbytadjgxYzNEVVRmV09VakFOQmdrcWhraUc5dzBCQVFzRkFEQWcKTVI0d0hBWURWUVFERXhWd1lXTnJZV2RsYzJWeWRtVnlMWE5sY25acFkyVXdIaGNOTWpReE1EQTFNRGsxT1RFMApXaGNOTXpReE1EQXpNRGsxT1RFMFdqQXdNUzR3TEFZRFZRUURFeVZ3WVdOcllXZGxjMlZ5ZG1WeUxYTmxjblpwClkyVXVaWFpsY21WemRDMXZiRzB1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTY1WkNWNDdnSzJYSFhGRXBBUkRDLytrK2NHOXVZN2NZVzlPTVRGTXpaTndRdFNjMERmNnh3V3ZhTWFRYQo3a0pCMTFCdHpTbURMb3RGdWd0ZTM3R1lNRE83dExhZ293RzJqWE5ld2pLNzhjSGdMSHJycUJWaDd2b2c0b0M4Ck1rRkhPVXRsWHl5Vzd2TXVkUTdCM3I1cG9HaGIxM1VxZjlaakMyaUdrd1pjbDBIaVAwa2EvOWw2Y1RuSUxkakEKTTY1OUUwUXMwWmxxL0xhNTFYZ1lxZEtCL24rZlh4VS9uZExzS3hsUFZTc0JzaThnWEV3N1ViRkd2b1pLSnZzSwptN1NVUUxCU0NZeE1HNlhXK1YwUlQxb2FteTRPRmt4SnNhcmUramJYWmorVWVUU3JRSlRjWmtVcGpqZFJUTFlFCjZBcFBscTlacVBCYUNtdjdTdUFEMlhrS1hRSURBUUFCbzRITk1JSEtNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVgpIU01FR0RBV2dCUVZnNmlKWG1mVktialc1b3o4WE5xUGZZUUpYVEJxQmdOVkhSRUVZekJoZ2hWd1lXTnJZV2RsCmMyVnlkbVZ5TFhObGNuWnBZMldDSVhCaFkydGhaMlZ6WlhKMlpYSXRjMlZ5ZG1salpTNWxkbVZ5WlhOMExXOXMKYllJbGNHRmphMkZuWlhObGNuWmxjaTF6WlhKMmFXTmxMbVYyWlhKbGMzUXRiMnh0TG5OMll6QU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBckVtS3lIMU1xRStKQjlMdFlSQ2lHNVlGOEhBVkl5dUpOL2U0WGdlMjBKbFFwNEpvCk9BNS81OURNV2tZbWJ5ZEtwcGlpUkhPUXE3SnRIWFVOWld2TXZPdFN0RERaOS8rZmdDZDY2ckhiVVk0YzNRaWkKcWZCVytGUm94dlBkOWsySU1FYktlU0EwWEZyS016WGxORmwwM2pSU1REZklkb1lRbTJwV2NsRWllWktkTHV4eQptemhBRzdEbDJtbUZXUFRKaFF5WjhQSUhqdnE5UC9pcEpYeEZOQ2JEQXFWMUhLNnY3UzF5L3I0d2tOZnhmQVZCCms4RnYyU3h2djRsVXB5emFYQkY0amdobTVkQXBZandBT3FLUk5xSndTNVYvS3hzRzRHcnp5YTUzU2VOMXJYU0MKSFVUWkg0ZlRjQkxCU2pFa1RMZEJlcFJxbUZ0ZDFJZDdJaURKbGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNjVaQ1Y0N2dLMlhIWEZFcEFSREMvK2srY0c5dVk3Y1lXOU9NVEZNelpOd1F0U2MwCkRmNnh3V3ZhTWFRYTdrSkIxMUJ0elNtRExvdEZ1Z3RlMzdHWU1ETzd0TGFnb3dHMmpYTmV3aks3OGNIZ0xIcnIKcUJWaDd2b2c0b0M4TWtGSE9VdGxYeXlXN3ZNdWRRN0IzcjVwb0doYjEzVXFmOVpqQzJpR2t3WmNsMEhpUDBrYQovOWw2Y1RuSUxkakFNNjU5RTBRczBabHEvTGE1MVhnWXFkS0IvbitmWHhVL25kTHNLeGxQVlNzQnNpOGdYRXc3ClViRkd2b1pLSnZzS203U1VRTEJTQ1l4TUc2WFcrVjBSVDFvYW15NE9Ga3hKc2FyZStqYlhaaitVZVRTclFKVGMKWmtVcGpqZFJUTFlFNkFwUGxxOVpxUEJhQ212N1N1QUQyWGtLWFFJREFRQUJBb0lCQUhOdzA5MTM0NTBnYUlweQpNcmVVOFJqWndJRHorWkhmUEk1eW9VTWRXZ2ZJVmwrT2NGR1RScU5US0Q0Ky9mdFdlRkQ3MW5JOEwwMzFiUnQzClN1d3VhRGJtZ3NwUTIzSkUrcUZoc1VOVC9RakFTZ3RCeUl3NnZoeU9jT0xNMW11QjFWYmIvVGFmOE8zeU9BZWcKVFp2S2pwUE56NE5LcEtLeitTQ3ovWTI2QmxFUFJRb0VyNExYRkxkNmxuTU9CT3hxK1o4T2dGOEZOUW5CQ2FCUApZTWdxZE5PWlQ4alJMZTh1ZUtnZkdqY2NVSTYvZm9DZzIyeWhBZk5vZnhINkM4MldvbDY3eFA2V2VRTFFnbmhUCllPRmxEYXVoMC8wTlhzTHIzamUxSy9pVEEzS1Bwci9CUFN4eS95RkUrd0kzdnFUbGlmdU5ESHZIOHYvR3pjRTYKZHp0dmRnRUNnWUVBK2FPMVVTUVZMU0J3VXY5d2NLU29VcUN6VkhWaVhHUG0xNkVNLzh0ZFJCS0ZvMGRkZUMvUApaV2dZenN6bTk3OHhNcDlZc1B6ZlJpcnBYWk9xQllCYWd0Z3VXZEFZOUVueUNnZXEyUGhHSENzUC9iUEp1NU55CmRXR0h1SVdZWWFydWI0b1pxWGxSWlFNV1dIc2crWlEydVJEODNmVFpURi9jZlRwdzlqYjQwaDBDZ1lFQThaYmsKWnEzNUpDMTZjWnpqM3VxZVcvdVl2ZG01SzBWbGlBMFlLdmZZZXZ2YTFpMitZN08vQVBwRFZWTVROUjFxbG1xTAp5QlZjNlNjWm1KMWlPWE9IdXNzNkZYb3pQUmFNaGEveWx0QTdKRlJaTHpaQnUwaG1xNnNlaU1ZNk5lYnlGeXo4CnRzOXNqb3F1ZHpUelB1b2ZJc1FUSVhGQXNOamNkRG9iaWdJcnBVRUNnWUVBMXZjRHdYVml6dE1xSmk1VU1vdDMKYm45M0xQbFAwK01xK3U5eDlDcTRpMCt2eUNSQjlxYWszdHUrMFFWY3RtWHJCWDUxcnlKeFdVakdYNUF5VGo1eQpzazFaekhrSHBBU3c2YllraG1WMGFma2k4Z0tKYW43VGh3U1BESFB0L2R4bEthTXY2ZUhRRnoyTFZuSGd1VW5KCnZaOUZRQlFCc21TeHh4dzEvYTdrb0hrQ2dZQUd1ajM0QWdZN0ZLMGhOczQ5cWVqcEJOT1hEZFlUTjJhQmFHUHcKNWwvMzVNV09TMDNPOXZWdHNJcHBlTnZERWVPaTlxcVgwc2g0a2FjcjBjNG5iV2t0TVhXWG5ZU0p3ZlA5MFExLwpWNk1kK3Q5VTZqemdXejdJcndZMXB0ZCtJc1ZCRWZham5Ka1lTeEphclhYTW5iWnFRRzJMODl4cVVFK3JTT2IxCmErUU5RUUtCZ1FEMGlqZTlMVEV3aldhcFZoVUxRS1RXVGhrQ1RKcWx5OHBFNGt0QjVSUXk5K2RMY1oyampBTTcKc2xGOFpsNmkzSGs1Q1RhNEdoc1dnZ1dZbjdmMXU3dlRHSUZmU2ROY255Zno2T1ZlQ25vTHRRaG90Qmt2RE53SQpRN1UxVlM2ZHRCc0ZMcy8wK05RVGpURi85L3NKbGd0U1Qxa29jdGFRb1p5YXJwZ0pXYXJSL1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  name: packageserver-service-cert
  namespace: everest-olm
  annotations:
    helm.sh/resource-policy: keep
type: kubernetes.io/tls
---
# Source: everest/templates/everest-server/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: everest-jwt
  annotations:
    helm.sh/resource-policy: keep
data:
  id_rsa: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBb2s5M3I5czhRSFlFVEVzSll6SnR4TnRXQXpqSnYzUGlEOVVna0phcksrZ05pcTNqCjUydzlnOThwa2I5R1ZyOXBBU3IyN1AxelNJeGpGS212cUVOOElVT3E3eHBsbDgvdHZwQ2c5OGRZck5CdjI4YzEKVUZJNmtaSHE1Y3hhVGxZaVBKMjZ5ME5mNGY2b1FpalZxV1RzVGt6UUNCRkw1blNJZFF6NE16RFNKL2RuUGJCVgpKdGp5aGdwOXhPS0xnMVlNa0J1d3paYkV3TWdyQmJVK1k5eXZjWXZIeVhQaXE1eEhFMHczT1dYSm1Ea1FkRy80CkZ2d0o1MS80dWlQNVN3a2JtZ2ZFQzhEczI4OWRJOFhmU2hOK3V4QWl3MS9zcnBmcTFhVTlIc2pHMXliaVNlZUkKeUtnY1dDZ3V6dUs2djJyNm1OZXhTeENXUnpKQmkzeG9jOEN2K3JCcnBwTUt1OWpZUitiUE01QzRVeVFSUGp5dwpoWCsxa1R5RGF5bWdWMXoycnQvelRNRGh0dWMxSkR1MmtqWWltTExRR21JeGNVL3p2RStNcUdyMlUza2YxVjdWCndXZUErL2NMeElzVExNQUlOYWdJczBlYnROM1h1QUFVN2xjWXBHc1hMVWZCMHd4d3FTT2VKTFBhcUN2b0o1bysKbU9CcEE4WFllSUVWajVRaEJTSTZQa1JldGJPRVhLRWZCMkY2MllzUUozMkVhc3pnWHRkUnA5K1Q4Z3NyUlFFUAp1K0lwOGZvM25oMGF5NVRLN09VbU1sR3UrWU1YUStoaHFzOUcwcjkvejhXQzlvRkhGQjJyWDU4U2k2L1VKNWI1CnRQR3RtTFhJbE5QOGNLSmZKUjZNNnAxMVpRZExEU296NHNDUlFGbnJmTGdrY242STJSalBPMUwxWURjQ0F3RUEKQVFLQ0FnQnpFUDFieVlQY2V3NHUvQjlLbU15aSs0L3R0c3VvRThKVzBSUkdETnFLeFBjY3NveFlXeTc5Rnk5RQpLU0wzaXJrcFg4a3dWN25yMjhLK09sSFNhdzFNRThuUnVwZjlXU1pGckFqQndDeElUM2lOaVp0dE51NVlsdWE5ClJQTmNoOG03eVdKTWlaWW5CRDlLcitKUk5jQWsvbVdZNHBJNWJiSHpzVjhnQTJOcGZBWlFBSHROa0EzWEl3Ym8KbG1hcmxFeFJ1Wi9ORUM2cU1QMzNEUGVQR2p1eXRwTExhWUZ2Z2RvTmYwSERTanJ4MUxxcW9WcHpDUGtJYzh4RQpRZzZRdUlNOTNuV0lrNXdYZE5tbDY3aVJybUp3d1U2enpZUmdma2k0YjIxMkxvWndyeHRMbzM0Z0tyWDFkWDlCCm9oRWNkUDMxYnl3OGVDVGhrbXBQTmNKakZWNXJySDRvcVpFam1MM2lvVCtQWlVkanExNkJSaGw4RWxLcmxrU2EKbklIaFRHRmpOWktIamx1dnRuMldDK2g5Z0czSTNlcDZkZkQwTHdscTJpMWxDY0MvaG1EMFZRdUgzQUFVQS93VwpYVk54TzVrd3d2ZlB3N3RxeTZhNzZOMGgwOUlhZmpiS0owOVY3V05qM2F0MWFIZVU4dFRRMXBHd3VzZlpTOTdKCktvMnpjVmFxb2x1KzNWalB6YlFacHU5WUc3NktMd3QrRCtpQURlVE5TcnZvT2kvRWpLVmYvdFBOU0UyL1dUZWoKUDljNC9qMmR2UnNZUzZNZ0kvYVJ5TzRXNDRvcDlHU1dXeGhQR1R0elBjV2VmdjExdG9pQ1Z5cTdFaWN1Tm1aQwo0bi9DNHQ5L3FUc2xuM05iWmdKcVdURFprbEVmKzR4RjF0MVl3Y1JKSSt1bmdHMkhLUUtDQVFFQTA2MVpNSFdjCmZ5a3liSVhYV2o3eE9YL2twOGFWaytRa2RKcjFWUC9wcmg3SjFKK2pFR2JsaW9ySkxLK3V5dFE4MWtqM3N3d00KUjBoT0RXNThZWjdNVTgwQVppS3VDczRtVGxXM3drUWNLU2hyR0NYYTVuYyt2UUhjOEFRZjl5ZHJ4NnVGV05ZawpZVEdtUzZ2Z0JPQm02OW1vT1VVV3ltUDBkVmk2bUYvUnBnMXlMVU95U083bmsrL3N1U1hGdTRRaUhKSi9UK01rCnc3ZmZHMy9PYTBlS2VYMXNWRVhscHliM05jeXV1UmNrc0QvWlpGYTFBbTYybDlGeXRCdm9FRFhxNHkwOXgxajAKOHcwSld2OFpnanlqbCtTMW5LK0cwN2ttU0xwRUxoK2cxNmo4dlAxWkw2WFI5YXN1ZldFZ3RMdThRZTloWFlCSAorc1Vnak1vOTJvb1o5UUtDQVFFQXhFdmk1bithNHBmNzQzWFprbGFJTTNtZ04yNjZLVUx2MTQrWEZwc3ZHc0M3Cm9aNXpCK09YREhjOTg4RkYxV3ZyR0hFU1JlaUpPcVhFWEJjelgvK3liK2psOXQyTmY5SFVDSUhqNzcvQ3JZSEYKcmVnc3hJRFNsMVlDZVBRbjVzY2VISW9zZ05iV01Dcmw4WHBYdjU0b2t2MG8wSXN1Q0s2d3IvSy9EYUN0WGVFVQpvUWhlMDhXbEJCUjRrcnZvYXoxNGhyaFg1VGJvcG5FZXBRSGFUV1J6bjJZKzlpQ3JGTVdudTFaYVN3TkhOWWFlClk4TkJUVG4rQkJvMCsyTlNweXM4T2dYSFlZV3ZsSkk3Z1pRZlFMWWUvc0pKTmdTTEljV2NKOUNPc29LTGR1RmQKUEFjYnVKa2dJai9LUHdaQzRVeHM5QmpGOHNiYjdqVFkzM3NGNE5FWit3S0NBUUJ6UzBmNURSWmdiSi82WEN3ZwpDNGg0T1NEaUFWZ1haWHcxeHZFNWl1cE0zSmd5SjRFNXZkSG8xQThmTjlHTXlHMGFpa1BnVWYrZUU5UHZuTzVDCmZhdnRPUXV1bGRVV0xaTFB1QUNPMzJvM1FMeVVPb293WFdMZXI5VVhKaWdEQm9XK0M3NWwxTDJiOHQ4UStGemMKU3gzRCtKbVlGL21CNDArVFd2REhiZWxTK0ovbjU2ZUQ4aHhRaDYzNGFvcDR5RStNSUg4WGxERENLYlJyMWdFbwpqWjd1N1ZIRDFRNXhMTmdaaFpMbFhhV3VHaGplZmh1NVozUXMzUGdOQWVZMGJpbXg4MEpqQWlEcEFZREcvNHQxClZISUdtWndSNjhrVUtSU2hLRk5haS8rZmQzdXh0SXlQVjFJMDdUZzFNbUlPRHZOTE5vZGgxaTFlZVdCeFR2YkIKd2RiQkFvSUJBRDRDZHdBM3FWY1JpZ24xN2JCVDA1em5QQnlteHZwSDRmcG5xdVFDUytRWXBHMU8zNm5MVktrawpkaGF0cElEaUlaZE1DT2k2cDdjMkxJeW02NXpVNnFwOW1UL2VCMWdza2QzS0lwWlhMb21mS0RKaTJObU9sSGdvClBJbTNIMi9BMFJ0VTd2QVliZnN6WWdaaGpwekN1ckNNZHJ0Q2JGMWp5ZjhiSVEyT0I1WlRoeS9EdENrVUU2ZngKUzVHVytMbi81all3djl0eCtCYTBQMmtDNTlKdy9ER0xuREltYWNVYkYzeVByK0JvZmJORC9uOG5iRmFZRGsxLwpkZU5BSWhrYkNHQ1ArTWN1OHlOcytvMVpuSEhWMW43R0kxaUVJT3VmUUZBM2l3eUxQc0ZrT2c2L2RCdGhqQXdsCnVKOG1QRFJ0N3pGQkxpOGVjTldVTGpxUzQyMTh3TWNDZ2dFQUpTdnFYTkZpMzBJVW1DRmNhdTA2NmhOSUk3VU0KRHJpS3pEOG1WSkRxdk5wWTRHZHd5OWl5eTJ0ZE5zK3o0YjYxTE5lSHh5QTFYWi9MVDM2Wi9ZUGFqVHMrakkxSgo4N2FILy9Td1YyM3UrOHVObU1Ja1lZNFdMeHdFako1aXk2L0tmanF1eWd1aTl1TmVmZmlTU0tOc0VpYlN6Z3BXCm1zL21CdlhhYzJsSDJFMk03N2c4bzNObWIzQ2p2WlF4dnhvdFh5WWxic29qbU5iblJaSnBMakdYYm1KZHZIeWUKUHlFcnM2L1lOcWp3eWl1Yittc1JNVmJtdnRqaEkzSUd5eERTYklSU3Z0NEFMTTNtdTJ4Q2g4MjJvRlFxeGNoawphM004NDJ4SjFOaEE1elNUaUpyeEVqMUhaY0ViZEtKbWZ1VFBHNXRwMGZRNmlOYUhSUGdnNUNjUTZnPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: everest/templates/everest-server/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: everest-accounts
  namespace: everest-system
  annotations:
    insecure-password/admin: "true"
    helm.sh/resource-policy: keep
data:
  users.yaml: YWRtaW46CiAgcGFzc3dvcmRIYXNoOiA5OE1nMHBkaXd5S3Q0VkFkQ3VwYXpTV2FRNGRlSFlmY092bW1PSmFZc1ZjUzhmNlcwa0d4ZjJRd0lEd3FlbnBFCiAgZW5hYmxlZDogdHJ1ZQogIGNhcGFiaWxpdGllczoKICAgIC0gbG9naW4K
---
# Source: everest/templates/everest-server/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: everest-rbac
data:
  policy.csv: |
    g, admin role:admin
---
# Source: everest/templates/everest-olm/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:controller:operator-lifecycle-manager
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
- nonResourceURLs: ["*"]
  verbs: ["*"]
---
# Source: everest/templates/everest-olm/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aggregate-olm-edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
- apiGroups: ["operators.coreos.com"]
  resources: ["subscriptions"]
  verbs: ["create", "update", "patch", "delete"]
- apiGroups: ["operators.coreos.com"]
  resources: ["clusterserviceversions", "catalogsources", "installplans", "subscriptions"]
  verbs: ["delete"]
---
# Source: everest/templates/everest-olm/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aggregate-olm-view
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
- apiGroups: ["operators.coreos.com"]
  resources: ["clusterserviceversions", "catalogsources", "installplans", "subscriptions", "operatorgroups"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["packages.operators.coreos.com"]
  resources: ["packagemanifests", "packagemanifests/icon"]
  verbs: ["get", "list", "watch"]
---
# Source: everest/templates/everest-olm/packageserver.rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: packageserver-clusterrole
rules:
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - operators.coreos.com
  resources:
  - catalogsources
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - packages.operators.coreos.com
  resources:
  - packagemanifests
  verbs: ["*"]
---
# Source: everest/templates/everest-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: everest-operator
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - backupstorages
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - backupstorages/finalizers
  verbs:
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - backupstorages/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusterbackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusterbackups/finalizers
  verbs:
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusterbackups/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusterrestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusterrestores/finalizers
  verbs:
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusterrestores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusters/finalizers
  verbs:
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseclusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseengines
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - databaseengines/finalizers
  verbs:
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - databaseengines/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - monitoringconfigs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - everest.percona.com
  resources:
  - monitoringconfigs/finalizers
  verbs:
  - update
- apiGroups:
  - everest.percona.com
  resources:
  - monitoringconfigs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.victoriametrics.com
  resources:
  - vmagents
  verbs:
  - create
  - delete
  - get
  - update
- apiGroups:
  - operators.coreos.com
  resources:
  - clusterserviceversions
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - operators.coreos.com
  resources:
  - installplans
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - operators.coreos.com
  resources:
  - subscriptions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - pgv2.percona.com
  resources:
  - perconapgbackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - pgv2.percona.com
  resources:
  - perconapgclusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - pgv2.percona.com
  resources:
  - perconapgrestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - psmdb.percona.com
  resources:
  - perconaservermongodbbackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - psmdb.percona.com
  resources:
  - perconaservermongodbrestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - psmdb.percona.com
  resources:
  - perconaservermongodbs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - pxc.percona.com
  resources:
  - perconaxtradbclusterbackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - pxc.percona.com
  resources:
  - perconaxtradbclusterrestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - pxc.percona.com
  resources:
  - perconaxtradbclusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: everest/templates/everest-server/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: everest-admin-cluster-role
rules:
  - apiGroups: ["everest.percona.com"]
    resources: ["databaseengines"]
    verbs: ["get", "list", "update"]
  - apiGroups: ["everest.percona.com"]
    resources: ["databaseclusters", "databaseclusterbackups", "databaseclusterrestores", "backupstorages", "monitoringconfigs"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["secrets", "configmaps", "namespaces"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["nodes", "pods", "persistentvolumes"]
    verbs: ["get", "list"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["list"]
  - apiGroups: ["everest.percona.com"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: everest/templates/everest-olm/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: olm-operator-binding-olm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:operator-lifecycle-manager
subjects:
- kind: ServiceAccount
  name: olm-operator-serviceaccount
  namespace: everest-olm
---
# Source: everest/templates/everest-olm/packageserver.rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: packageserver-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: packageserver-clusterrole
subjects:
- kind: ServiceAccount
  name: olm-operator-serviceaccount
  namespace: everest-olm
---
# Source: everest/templates/everest-server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: everest-admin-cluster-role-binding
roleRef:
  kind: "ClusterRole"
  apiGroup: "rbac.authorization.k8s.io"
  name: everest-admin-cluster-role
subjects:
  - kind: "ServiceAccount"
    name: everest-admin
    namespace: everest-system
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: everest-helm-pre-delete-hook
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups:
      - operators.coreos.com
    resources:
      - clusterserviceversions
    verbs:
      - delete
      - list
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: everest-helm-post-install-hook
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups:
      - operators.coreos.com
    resources:
      - installplans
    verbs:
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - operators.coreos.com
    resources:
      - subscriptions
      - clusterserviceversions
    verbs:
      - get
      - list
      - watch
---
# Source: everest/templates/everest-operator/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: everest-operator
  namespace: everest-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: everest/templates/everest-server/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: everest-admin-role
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get"]
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: everest-helm-pre-delete-hook
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: everest-helm-pre-delete-hook
subjects:
  - kind: ServiceAccount
    name: everest-helm-pre-delete-hook
    namespace: everest-monitoring
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: everest-helm-post-install-hook
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: everest-helm-post-install-hook
subjects:
  - kind: ServiceAccount
    name: everest-helm-post-install-hook
    namespace: everest-monitoring
---
# Source: everest/templates/everest-monitoring/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: everest-operator
  namespace: everest-monitoring
subjects:
- kind: ServiceAccount
  name: everest-operator
  namespace: everest-system
roleRef:
  kind: ClusterRole
  name: everest-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: everest/templates/everest-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: everest-operator
  namespace: everest-system
subjects:
- kind: ServiceAccount
  name: everest-operator
  namespace: everest-system
roleRef:
  kind: ClusterRole
  name: everest-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: everest/templates/everest-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: everest-operator-local
  namespace: everest-system
subjects:
- kind: ServiceAccount
  name: everest-operator
  namespace: everest-system
roleRef:
  kind: Role
  name: everest-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: everest/templates/everest-server/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: everest-admin-role-binding
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: everest-admin-role
subjects:
  - kind: "ServiceAccount"
    name: everest-admin
---
# Source: everest/templates/everest-olm/packageserver.service.yaml
apiVersion: v1
kind: Service
metadata:
  name: packageserver-service
  namespace: everest-olm
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: "5443"
    port: 5443
    protocol: TCP
    targetPort: 5443
  selector:
    app: packageserver
  type: ClusterIP
---
# Source: everest/templates/everest-operator/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: everest-operator-metrics-service
  namespace: everest-system
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app: everest-operator
  sessionAffinity: None
  type: ClusterIP
---
# Source: everest/templates/everest-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: everest
  labels:
    app.kubernetes.io/name: everest
    app.kubernetes.io/component: everest
spec:
  selector:
    app.kubernetes.io/component: everest
    app.kubernetes.io/name: everest
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
---
# Source: everest/templates/everest-olm/catalog-operator.deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-operator
  namespace: everest-olm
  labels:
    app: catalog-operator
spec:
  strategy:
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: catalog-operator
  template:
    metadata:
      labels:
        app: catalog-operator
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: olm-operator-serviceaccount
      containers:
        - name: catalog-operator
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
          command:
          - /bin/catalog
          args:
          - '--namespace'
          - everest-olm
          - --configmapServerImage=quay.io/operator-framework/configmap-operator-registry:latest
          - --util-image
          - quay.io/operator-framework/olm@sha256:1b6002156f568d722c29138575733591037c24b4bfabc67946f268ce4752c3e6
          - --set-workload-user-id=true
          image: quay.io/operator-framework/olm@sha256:1b6002156f568d722c29138575733591037c24b4bfabc67946f268ce4752c3e6 
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: metrics
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            requests:
              cpu: 10m
              memory: 80Mi
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: everest/templates/everest-olm/olm-operator.deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: olm-operator
  namespace: everest-olm
  labels:
    app: olm-operator
spec:
  strategy:
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: olm-operator
  template:
    metadata:
      labels:
        app: olm-operator
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: olm-operator-serviceaccount
      containers:
        - name: olm-operator
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
          command:
          - /bin/olm
          args:
          - --namespace
          - $(OPERATOR_NAMESPACE)
          - --writeStatusName
          - ""
          image: quay.io/operator-framework/olm@sha256:1b6002156f568d722c29138575733591037c24b4bfabc67946f268ce4752c3e6
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: metrics
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
          terminationMessagePolicy: FallbackToLogsOnError
          env:
          - name: OPERATOR_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: OPERATOR_NAME
            value: olm-operator
          resources:
            requests:
              cpu: 10m
              memory: 160Mi
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: everest/templates/everest-olm/packageserver.deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: packageserver
  namespace: everest-olm
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: packageserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: packageserver
    spec:
      containers:
      - command:
        - /bin/package-server
        - -v=4
        - --secure-port
        - "5443"
        - --global-namespace
        - everest-olm
        env:
        - name: OPERATOR_CONDITION_NAME
          value: packageserver
        image: quay.io/operator-framework/olm@sha256:1b6002156f568d722c29138575733591037c24b4bfabc67946f268ce4752c3e6
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 5443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: packageserver
        ports:
        - containerPort: 5443
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 5443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp
          name: tmpfs
        - mountPath: /apiserver.local.config/certificates
          name: apiservice-cert
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: webhook-cert
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccount: olm-operator-serviceaccount
      serviceAccountName: olm-operator-serviceaccount
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: tmpfs
      - name: apiservice-cert
        secret:
          defaultMode: 420
          items:
          - key: tls.crt
            path: apiserver.crt
          - key: tls.key
            path: apiserver.key
          secretName: packageserver-service-cert
      - name: webhook-cert
        secret:
          defaultMode: 420
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          secretName: packageserver-service-cert
---
# Source: everest/templates/everest-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: everest-operator
  namespace: everest-system
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: everest-operator
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: everest-operator
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: DISABLE_TELEMETRY
          value: "true"
        - name: MONITORING_NAMESPACE
          value: everest-monitoring
        - name: DB_NAMESPACES
          value: everest #TODO
        image: perconalab/everest-operator:0.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
        name: manager
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
      serviceAccount: everest-operator
      serviceAccountName: everest-operator
      terminationGracePeriodSeconds: 10
---
# Source: everest/templates/everest-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: percona-everest
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: everest
      app.kubernetes.io/component: everest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: everest
        app.kubernetes.io/component: everest
    spec:
      serviceAccountName: everest-admin
      automountServiceAccountToken: true
      volumes:
      - name: jwt-secret
        secret:
          secretName: everest-jwt
      containers:
        - name: everest
          image: perconalab/everest:0.0.0
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 15
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 20Mi
          volumeMounts:
          - name: jwt-secret
            mountPath: /etc/jwt
---
# Source: everest/templates/everest-olm/packageserver.apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1.packages.operators.coreos.com
  annotations:
    helm.sh/resource-policy: keep
spec:
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMRENDQWhTZ0F3SUJBZ0lSQUpaa0pOVThuQzZObUJIK0ZySGlIcE13RFFZSktvWklodmNOQVFFTEJRQXcKSURFZU1Cd0dBMVVFQXhNVmNHRmphMkZuWlhObGNuWmxjaTF6WlhKMmFXTmxNQjRYRFRJME1UQXdOVEE1TlRreApORm9YRFRNME1UQXdNekE1TlRreE5Gb3dJREVlTUJ3R0ExVUVBeE1WY0dGamEyRm5aWE5sY25abGNpMXpaWEoyCmFXTmxNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVCMUtyNGZxSSsveXRFemYKUUxBdWhTVVhBRUw3SjBaUzArL1ZreVU3WUkzYWorR3BoSjFuaXNOa0ZLM0NzbHp4UCtJeVJ0dkN1bitrak5QNQpGamJGVWhMN3d3RmNqTmsvQ3c3V1gzQTZMSERmcmdkenhKR2I4NThZcnBuQm5yZHE5WU9BNGt0cGxvdjJVODcwCmxaUmNpQnVBM2dvdGpFeXpZbXRVQ3Q5VCt2SEswdFNPWG5mWHprSFQ2NERaM0NQVm5WNE14Z3JYZC9kdUFkOXEKSG12SFc2NDZ1ckc0Q1VSNGY5U2FaVXJWMXpEMjQzZDl3b2VLQU1Va3lnRGVXeUJ4L09ZRHlmc0xKajdZZitmLwpqeHVTVlowSE1JYlhKNk9MYWJtVWlVdGhiNkxzZmMvQUhLMFk5RFNHRUJpc2p3M3pvWURKdDRSajFvRGNHaEtsCk11Nit4d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZCV0RxSWxlWjlVcAp1TmJtalB4YzJvOTloQWxkTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBdGpvY0JXL3F0MVByUG1KdTJZS1cwClZ1K1QvRFNjNVpDemY1MlNTV3RSMTMrT0ZHbDJLMHllUmhqVHd6bG1UaTNJNGlWN2NQUWpYejBiU1p0VHRpdnAKR0x1Rm8ycUFwVy9PQ3lta3FFYkw2eGdDWFpuSnRhb3VwTE5ZbUkvUE1nUHlPRHN1YmcyaE5LMkJuYTREY3B4UQpONzR0dzZmNjFMTEhMb2ZCRXg3NGdreTZsbjFmandkcG5NRStyeHVINmRoYS9CZENqYTQ2MFdQTnNoZ0M5aWljCnlEVUgraGdzeWZUc1F4QnNoTlpxc0RQZW5mNTl0WFpkRjB3NENvb1kyNnJHSVBIQlFuK3dHQk5mazcyQ1lBTDEKcVFRQzZkSjFOeVd5ODhoaENRaFBTZ2w3V0dSMGxtNm5janY0SmlpRzB5aGhQWk5pYnVTU3lmQkEraWtCem1KRQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  group: packages.operators.coreos.com
  groupPriorityMinimum: 2000
  version: v1
  versionPriority: 800
  service:
    name: packageserver-service
    namespace: everest-olm
    port: 5443
---
# Source: everest/templates/everest-olm/everest-catalogsource.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: everest-catalog
  namespace: everest-olm
spec:
  displayName: Everest Catalog
  grpcPodConfig:
    securityContextConfig: restricted
  image: perconalab/everest-catalog:0.0.0
  publisher: Percona
  sourceType: grpc
  updateStrategy:
    registryPoll:
      interval: 45m
---
# Source: everest/templates/everest-olm/olmconfig.yaml
apiVersion: operators.coreos.com/v1
kind: OLMConfig
metadata:
  name: cluster
---
# Source: everest/templates/everest-monitoring/operatorgroup.yaml
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: everest-monitoring
  namespace: everest-monitoring
spec:
  targetNamespaces:
  - everest-monitoring
  upgradeStrategy: Default
---
# Source: everest/templates/everest-olm/operatorgroup.yaml
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: olm-operators
  namespace: everest-olm
spec:
  targetNamespaces:
    - everest-olm
---
# Source: everest/templates/everest-monitoring/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: victoriametrics-operator
  namespace: everest-monitoring
spec:
  channel: stable-v0
  config: {}
  installPlanApproval: Manual
  name: victoriametrics-operator
  source: everest-catalog
  sourceNamespace: everest-olm
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: everest-helm-pre-delete-hook-821939
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:
      containers:
        - image: bitnami/kubectl:latest
          name: everest-helm-pre-delete-hook
          command:
            - /bin/sh
            - -c
            - |
              kubectl delete csv -n everest-monitoring --all --wait
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: everest-helm-pre-delete-hook
      serviceAccountName: everest-helm-pre-delete-hook
      terminationGracePeriodSeconds: 30
---
# Source: everest/templates/everest-monitoring/hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: everest-helm-post-install-hook-392243
  namespace: everest-monitoring
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:
      containers:
        - image: bitnami/kubectl:latest
          name: everest-helm-post-install-hook
          command:
            - /bin/sh
            - -c
            - |
              subs=$(kubectl -n everest-monitoring get subscription -o jsonpath='{.items[*].metadata.name}')
              for sub in $subs
              do
                echo "Waiting for InstallPlan to be created for Subscription $sub"
                kubectl wait --for=jsonpath='.status.installplan.name' sub/$sub -n everest-monitoring --timeout=600s
                
                ip=$(kubectl -n everest-monitoring get sub $sub -o jsonpath='{.status.installplan.name}')
                echo "InstallPlan $ip created for Subscription $sub"

                echo "Approving InstallPlan $ip"
                kubectl -n everest-monitoring patch installplan $ip --type='json' -p='[{"op": "replace", "path": "/spec/approved", "value": true}]'

                echo "Waiting for InstallPlan to be complete $ip"
                kubectl wait --for=jsonpath='.status.phase'=Complete installplan/$ip -n everest-monitoring --timeout=600s

                csv=$(kubectl get sub $sub -n everest-monitoring -o jsonpath='{.status.installedCSV}')

                echo "Waiting for CSV $csv to succeed"
                kubectl wait --for=jsonpath='.status.phase'=Succeeded csv/$csv -n everest-monitoring --timeout=600s
              done
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: everest-helm-post-install-hook
      serviceAccountName: everest-helm-post-install-hook
      terminationGracePeriodSeconds: 30
